using System;
using static System.Console; // чтобы не писать всегда Console

namespace HW_Theme3_Conditions_Cycles
{
    class Program
    {
        /// <summary>
        /// Блок 3. Управляющие конструкции и цыклы.
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            StartApp();
        }
        #region Меню приложения
        /// <summary>
        /// Старт приложения вынесен в отдельный метод чтобы можно было перезапускать приложение
        /// </summary>
        private static void StartApp()
        {
            Clear(); // очистка окна консоли
            WriteLine("Блок 3. Управляющие конструкции и цыклы.");
            WriteLine("Выберете задачу:");
            WriteLine("Задача 1. Проверка четности числа.");
            WriteLine("Задача 2. Программа подсчёта суммы карт в игре «21»");
            WriteLine("Задача 3. Проверка простого числа.");
            WriteLine("Для выхода из приложения нажмите \"0\"");
            char choos = ReadKey().KeyChar; // св-во KeyChar возвращает символ нажатой клавиши. значение присваивается в переменную для дальнейшего анализа
            switch (choos)                  // анализируем введенный символ
            {
                case '1':                   // если нажата 1
                    CheckEvenOddNumber();   // запускаем метод, в котором реализована задача 1
                    break;
                case '2':
                    TwentyOneCount();       // запускаем метод, в котором реализована задача 2
                    break;
                case '3':
                    CheckNumberForSimple(); // запускаем метод, в котором реализована задача 3
                    break;
                case '0':
                    return;                 // возвращаемся в Main, где уже нет других команд для выполнения, тем самым завершаем работу приложения
                default:                    // если нажата кнопка отличная от 1,2,3, то 
                    CursorLeft = 0;         // устанавливаем курсов в начало строки, чтобы затереть нажатую кнопку слудующим выводом
                    WriteLine("Нет такого пункта. Нажмите кнопку для продолжения и повторите ввод.");
                    ReadKey();              
                    StartApp();             // перезапуск приложения
                    break;
            }
        }
        #endregion

        #region Задача 1.  Проверка четности числа.
        /// <summary>
        /// Задача 1.  Проверка четности числа.
        /// </summary>
        static void CheckEvenOddNumber()
        {
            Clear();
            WriteLine("Задача 1. Проверка четности числа.");
            WriteLine("Введите целое число:");

            int number = 0;
            bool numberIsInt = int.TryParse(ReadLine(), out number); // метод TryParse пытается преобразовать введенную с клавиатуры строку в целое число. если успешно, то возвращает значение true, которую записываем в переменную, как подтверждение, что введено целое число. результат преобразования записывается в переменную number с помощью модификатора out

            if (numberIsInt)    // проверяем, что число целое
            {
                if (number % 2 == 0)    // если число делится на 2 без остатка, то число четное
                {
                    WriteLine($"Введено четное число ({number})");
                    ReadKey();          // задержка вывода
                    StartApp();         // перезапускаем приложение
                }
                else                    // если число не делится на 2 без остатка, то число нечетное
                {
                    WriteLine($"Введено нечетное число ({number})");
                    ReadKey();
                    StartApp();
                }
            }
            else                        // если введено не целое число, то повторяем ввод
            {
                WriteLine("Некорректный ввод! Для продолжения нажмите любую кнопку и повторите ввод.");
                ReadKey();
                CheckEvenOddNumber();   // вызов этого же метода для повторного ввода
            }
        }
        #endregion

        #region Задача 2. Программа подсчёта суммы карт в игре «21»
        /// <summary>
        /// Задача 2. Программа подсчёта суммы карт в игре «21»
        /// </summary>
        static void TwentyOneCount()
        {
            string card = "";                   // переменная для хранения типа карты
            int summCards = 0;                  // сумма "весов" карт
            byte cardNum = 0;                   // "вес" карты
            byte cardsCount = 0;                // количество карт
            string[] cards = new string[5];     // массив для хранения карт

            Clear();
            WriteLine("Задача 2. Программа подсчёта суммы карт в игре «21».");
            WriteLine("Введите количество карт на руках от 1 до 5:");
            char choos = ReadKey().KeyChar;     // переменная, которая принимает символ, нажатой клавиши на клавиатуре
            
            string cardsStr = "";               // переменная предназначена для корректного отображения слова "карта" для разного количества
            switch (choos)
            {
                case '1':
                    cardsCount = 1;             // количество карт
                    cardsStr = "карта";         // одна КАРТА
                    break;
                case '2':
                    cardsCount = 2;
                    cardsStr = "карты";         // две КАРТЫ
                    break;
                case '3':
                    cardsCount = 3;
                    cardsStr = "карты";
                    break;
                case '4':
                    cardsCount = 4;
                    cardsStr = "карты";
                    break;
                case '5':
                    cardsCount = 5;
                    cardsStr = "карт";          // 5 КАРТ
                    break;
                default:                        // для обработки некорректного ввода
                    WriteLine("Неверный ввод, попробуйте еще раз.");
                    ReadKey();
                    TwentyOneCount();           // перезапуск текущего метода для повторного ввода
                    break;
            }
            
            byte i = 0;     // итератор количества верных вводов с клавиатуры
            for (; ; )      // бесконечный цикл, так как при вводе может быть любое количество ошибок ввода
            {
                CursorLeft = 0; // затираем количество карт
                WriteLine($"У Вас {choos} {cardsStr}.");    // У Вас 1 карта, У Вас 2 карты, ... У Вас 5 карт
                WriteLine($"Номиналов введено верно {i} из {choos}.");  // для контроля сколько карт введено верно и сколько осталось ввести
                WriteLine($"Введите номиналы карт (6,7,8,9,10,J(валет, 10),Q(дама, 10),K(король, 10),T(туз, 11))."); // номинал туза можно было и по настоящему сделать, в зависимости от суммы 1 или 11, как в настоящей игре, но хочу быстрее прийти на темы, которые надо изучить
                Write($"Карта {i} из {choos}:"); 
                card = ReadLine().ToUpper();    // метод переводит строчные буквы в заглавные, для того, чтобы можно было вводить и строчные и заглавные буквы, а анализировать только заглавные. для сокращения количества проверок

                // проверка ввода типа карты
                if (card == "6" || 
                    card == "7" || 
                    card == "8" || 
                    card == "9" || 
                    card == "10" || 
                    card == "J" || 
                    card == "Q" || 
                    card == "K" || 
                    card == "T")
                {
                    cards[i] = card;        // сохраняем карту в массив, на лету не проверяю и не суммирую, потому что метод будет слишком громоздкий
                    i++;                    // при удачном вводе увеличиваем итератор
                    if (i == cardsCount)    // признак выхода из бесконечного цикла, когда итератор равено количеству карт
                    {
                        break;
                    }
                }
                else // если карта введена неверно, то игнорируем ввод. итератор не изменяет свое значение при ошибочном вводе
                {
                    WriteLine("Неверный ввод, попробуйте еще раз.");
                    ReadKey();
                    continue; // выполняем следующую итерацию бесконечного цикла
                }
            }

            // здесь перебираем карты, которые "на руках"
            i = 0;  // обнуляем итератор
            Write("На руках карты:");   // выводим какие карты "на руках"
            while (i < cardsCount)  // делаем количество итераций по количеству карт "на руках". строгое неравенство "<", так как итератор стартует с 0, а не с 1
            {
                if (i == (cardsCount - 1)) // определяем последняя карта карта или нет
                {
                    WriteLine(cards[i] + "."); // если последняя карта, то ставим точку в конце строки
                }
                else
                {
                    Write(cards[i] + ", "); // если не последняя карта, то ставим запятую
                }
                
                switch (cards[i])   // смотрим тип карты и выдаем вес
                {
                    case "6":
                        cardNum = 6;
                        break;
                    case "7":
                        cardNum = 7;
                        break;
                    case "8":
                        cardNum = 8;
                        break;
                    case "9":
                        cardNum = 9;
                        break;
                    case "10":
                    case "J":
                    case "Q":
                    case "K":
                        cardNum = 10;
                        break;
                    case "T":
                        cardNum = 11;   // для туза вес - 11
                        break;
                }
                summCards += cardNum;   // суммируем веса
                i++;                    // увеличиваем итератор
            }
            WriteLine("Сумма карт:" + summCards);
            ReadKey();
            StartApp();
        }
        #endregion

        #region Задача 3. Проверка простого числа.
        /// <summary>
        /// Задача 3. Проверка простого числа.
        /// Составные числа — это натуральные числа, у которых есть больше двух делителей (1, оно само и например, 2 и/или 3); это противоположность простым числам.
        /// </summary>
        private static void CheckNumberForSimple()
        {
            int number = 0;
            bool isCompositeNum = false; // признак составного числа
            Clear();
            WriteLine("Задача 3. Проверка простого числа.");
            WriteLine("Введите целое число больше 1, отрицательные числа будут взяты по модулю:");

            bool numberIsInt = int.TryParse(ReadLine(), out number); // метод TryParse пытается преобразовать введенную с клавиатуры строку в целое число. если успешно, то возвращает значение true, которую записываем в переменную, как подтверждение, что введено целое число. результат преобразования записывается в переменную number с помощью модификатора out
            if (number == 0 || number == 1 || number == 2 || number == 3) // введенные числа 0,1,2,3 не обрабатываем по причине их простоты
            {
                WriteLine($"{number} - простое число");
                ReadKey();
                StartApp();
            }

            if (numberIsInt)    // проверяем число, чтобы оно было целым
            {
                number = Math.Abs(number);  // берем число по модулю (заменяем отрицательные на положительные)
                for (int i = 2; i < number - 1; i++)    // исследуем диапазон от 2 до n-1, где n - введенное число
                {
                    if (number % i == 0)    // проверяем делится ли число, на число из диапазона без остатка
                    {
                        isCompositeNum = true;  // если делится, то переводим признак составного числа в true
                        Console.WriteLine($"Число {number} делится без остатка на {i}");    // выводим делитель, который делит введенное число без остатка
                    }
                }
                if (isCompositeNum) // число составное?
                {
                    WriteLine($"Число ({number}) является составным."); // да
                }
                else
                {
                    WriteLine($"Число ({number}) является простым."); // нет
                }
                ReadKey();
                StartApp();
            }
            else
            {
                WriteLine("Некорректный ввод! Для продолжения нажмите любую кнопку и повторите ввод.");
                ReadKey();
                CheckEvenOddNumber(); // перезапуск метода при некорректном вводе
            }
        }
        #endregion
    }
}
